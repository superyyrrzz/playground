WEBVTT

00:00:00.000 --> 00:00:01.770
• 您写完代码，

00:00:01.770 --> 00:00:03.450
你已经调试了它， 它工作得很好，

00:00:03.450 --> 00:00:05.160
你把它推出现场， 现在

00:00:05.160 --> 00:00:06.990
你正在经历
性能问题。

00:00:06.990 --> 00:00:08.910
你想知道怎么做
来解决这些问题，

00:00:08.910 --> 00:00:11.565
在这个多部分系列中
视觉工作室工具箱，

00:00:11.565 --> 00:00:14.400
我们要谈所有
关于可视化工作室中的分析。

00:00:14.400 --> 00:00:20.130
[音乐]

00:00:20.130 --> 00:00:20.840
嘿，大家好。

00:00:20.840 --> 00:00:22.790
欢迎来到可视化工作室工具箱。

00:00:22.790 --> 00:00:24.350
我是你的主人莱斯利·理查森

00:00:24.350 --> 00:00:27.110
今天，我的同事加入了我，

00:00:27.110 --> 00:00:28.970
[听不到]，谁是 PM

00:00:28.970 --> 00:00:32.580
分析团队，
欢迎 [听不见] 。

00:00:32.580 --> 00:00:34.170
谢谢你邀请我
莱斯利。我很高兴来到这里。

00:00:34.170 --> 00:00:37.130
• 真棒。对于那些
你们谁不知道，

00:00:37.130 --> 00:00:40.565
其实我是视觉对象的成员
工作室调试团队

00:00:40.565 --> 00:00:44.360
较大的小团队
视觉工作室诊断世界，

00:00:44.360 --> 00:00:47.610
这就是
分析团队进来。

00:00:47.610 --> 00:00:49.370
在这个多部分系列中，

00:00:49.370 --> 00:00:52.010
我们要谈谈
所有关于分析，

00:00:52.010 --> 00:00:53.930
但我们到底要是什么

00:00:53.930 --> 00:00:57.570
谈论分析， [听不见]？

00:00:57.570 --> 00:01:00.200
是的， 是的。所以只是为了给
该系列的概述，

00:01:00.200 --> 00:01:02.120
我真的很兴奋。

00:01:02.120 --> 00:01:04.610
基本上，我的想法
我们做的就是从

00:01:04.610 --> 00:01:07.340
分析高级概述
在前几集里

00:01:07.340 --> 00:01:08.840
真的到系列结束时，

00:01:08.840 --> 00:01:09.890
做一个深潜

00:01:09.890 --> 00:01:12.500
所有各种工具的
视觉工作室配置文件提供。

00:01:12.500 --> 00:01:14.670
• 太好了。对我来说

00:01:14.670 --> 00:01:16.380
我想还有很多其他人

00:01:16.380 --> 00:01:19.250
分析是你做后的事情

00:01:19.250 --> 00:01:22.180
你完成了调试的东西，
你继续运送你的代码，

00:01:22.180 --> 00:01:25.170
人们开始向你抱怨
关于你的应用太慢，

00:01:25.170 --> 00:01:27.215
然后你必须
快速学习

00:01:27.215 --> 00:01:30.230
所有这些工具，也许
你没有三思而后行

00:01:30.230 --> 00:01:32.555
关于在视觉工作室，以

00:01:32.555 --> 00:01:36.210
确定如何更好地
提高您的绩效，

00:01:36.210 --> 00:01:41.420
但你能告诉我们多一点
关于究竟是什么分析？

00:01:41.420 --> 00:01:45.735
是的， 当然。
就像你说莱斯利

00:01:45.735 --> 00:01:49.460
它真的是下一个级别
诊断过去的调试。

00:01:49.460 --> 00:01:51.740
所以肯定有
正如我们在内部说的

00:01:51.740 --> 00:01:54.080
内部循环方案
日常，

00:01:54.080 --> 00:01:55.940
试图确保
你的代码首先只是

00:01:55.940 --> 00:01:58.895
编译， 只是有一个类似的
行为，你期望，

00:01:58.895 --> 00:02:00.620
但真的有下一级

00:02:00.620 --> 00:02:03.030
诊断过去
就是"好吧，

00:02:03.030 --> 00:02:04.530
也许我的应用程序确实编译了它

00:02:04.530 --> 00:02:06.230
但我希望它是一个
效率更高一点，

00:02:06.230 --> 00:02:08.690
多一点表演，我
希望它快一点。

00:02:08.690 --> 00:02:11.395
所以，这真的是
分析开始发挥作用。

00:02:11.395 --> 00:02:13.150
公平地说， 不一定

00:02:13.150 --> 00:02:16.500
每个开发人员都关注
在此诊断中，

00:02:16.500 --> 00:02:18.710
但有一定
子集， 做

00:02:18.710 --> 00:02:20.870
我们迎合那些
开发人员并确保

00:02:20.870 --> 00:02:22.640
他们有适当的
和足够的工具

00:02:22.640 --> 00:02:25.220
地方，以便能够
解决这些挑战。

00:02:25.220 --> 00:02:27.110
这是通过基本上测量

00:02:27.110 --> 00:02:30.020
的性能
应用程序数据在运行时，

00:02:30.020 --> 00:02:31.340
捕获该性能数据，并

00:02:31.340 --> 00:02:32.690
然后回去看看

00:02:32.690 --> 00:02:36.365
我们稍后再谈
我们的工具如何实现此功能。

00:02:36.365 --> 00:02:38.120
真的， 当我们说话
关于性能，

00:02:38.120 --> 00:02:40.655
它不一定只是
我们正在查看的一个指标。

00:02:40.655 --> 00:02:42.770
我的意思是，性能可以
提到很多事情，

00:02:42.770 --> 00:02:46.280
但在一个高层次， 它可以
指挂钟时间，

00:02:46.280 --> 00:02:48.980
只是时间的数量，
应用程序正在采取

00:02:48.980 --> 00:02:52.445
运行或完成
某些操作，

00:02:52.445 --> 00:02:54.170
CPU 时间或 CPU 周期，

00:02:54.170 --> 00:02:55.670
时间量
你坚持像

00:02:55.670 --> 00:02:58.320
一个 Cpu 或它采取
处理某些任务，

00:02:58.320 --> 00:03:00.605
以及内存使用情况
以及在

00:03:00.605 --> 00:03:02.030
您分配的内存量

00:03:02.030 --> 00:03:03.440
对于不同的对象
和类似的东西。

00:03:03.440 --> 00:03:05.600
有很多不同的
我们看的指标，

00:03:05.600 --> 00:03:07.190
我们有很多
支持的不同工具

00:03:07.190 --> 00:03:09.215
那些不同的性能
调查。

00:03:09.215 --> 00:03:11.480
• 酷。所以当你开始

00:03:11.480 --> 00:03:14.405
分析，或者如果你只是
好奇，

00:03:14.405 --> 00:03:17.460
为什么除了基本，

00:03:17.460 --> 00:03:21.865
它提高了您的性能
您应该关心分析吗？

00:03:21.865 --> 00:03:25.820
是的， 是的。所以我觉得有
相当多的价值在什么

00:03:25.820 --> 00:03:27.500
分析提供两个

00:03:27.500 --> 00:03:29.450
服装和在
业务方面以及。

00:03:29.450 --> 00:03:30.830
所以，只要尝试举一些例子。

00:03:30.830 --> 00:03:33.035
在客户方面，
用户体验方面，

00:03:33.035 --> 00:03:35.030
我想每个人都只是
喜欢表演

00:03:35.030 --> 00:03:37.710
性能更好的应用程序，
执行速度更快的应用程序。

00:03:37.710 --> 00:03:37.890
• 谁没有？

00:03:37.890 --> 00:03:39.160
我肯定你去过莱斯利

00:03:39.160 --> 00:03:41.920
在那里你采取手机
应用程序或 Web 应用程序或任何应用程序，

00:03:41.920 --> 00:03:43.820
你只是加载它，
它只是坐在那里，

00:03:43.820 --> 00:03:46.220
它挂， 它不是
加载， 它需要永远。

00:03:46.220 --> 00:03:48.230
当然有很多
对客户的价值

00:03:48.230 --> 00:03:49.910
在确保
该应用程序，

00:03:49.910 --> 00:03:51.950
即使它最终起作用，
这还不够好

00:03:51.950 --> 00:03:55.125
它实际上需要工作
在一定时期内。

00:03:55.125 --> 00:03:56.760
少等待， 我想

00:03:56.760 --> 00:03:58.470
导致只是更快乐
客户一般。

00:03:58.470 --> 00:04:00.515
在 UX 方面，有
绝对有一些价值。

00:04:00.515 --> 00:04:03.950
在商业方面，还有
我认为成本也考虑。

00:04:03.950 --> 00:04:05.990
我认为，如果你主办一个
应用程序在云中，

00:04:05.990 --> 00:04:08.840
你必须付出代价
VMs 之类的东西，

00:04:08.840 --> 00:04:11.420
如果你有一定
优化和您

00:04:11.420 --> 00:04:14.570
在 中设计您的应用程序
这样的方式， 也许是

00:04:14.570 --> 00:04:15.980
多一点
来自 CPU 的执行者

00:04:15.980 --> 00:04:17.420
立场或占用更少的内存

00:04:17.420 --> 00:04:21.200
也许你不需要这么多
支持应用程序的 VM，

00:04:21.200 --> 00:04:22.840
因此，您的成本更低。

00:04:22.840 --> 00:04:25.485
肯定有很多价值
有在业务方面。

00:04:25.485 --> 00:04:28.300
最后，我们生活在一个
世界，现在我们有

00:04:28.300 --> 00:04:31.630
设计软件
各种约束方案。

00:04:31.630 --> 00:04:35.990
我们支持物联网分析和
有客户，

00:04:35.990 --> 00:04:38.000
我们已经工作， 并做了
分析广泛这样的

00:04:38.000 --> 00:04:40.060
作为 Xbox 团队的 Hololens 团队，

00:04:40.060 --> 00:04:43.190
他们有产品
在

00:04:43.190 --> 00:04:46.990
非常具体和有趣
环境，如VR，

00:04:46.990 --> 00:04:49.820
也只是游戏引擎
需要执行，

00:04:49.820 --> 00:04:50.900
因为他们的客户

00:04:50.900 --> 00:04:52.300
期待一定的
性能量，

00:04:52.300 --> 00:04:53.330
如果他们没有表演

00:04:53.330 --> 00:04:56.435
这些应用程序不是
必然是可取的使用。

00:04:56.435 --> 00:04:59.360
思考一些
这些约束方案，

00:04:59.360 --> 00:05:00.860
分析绝对是
站在最前沿

00:05:00.860 --> 00:05:02.285
很多不同的
人们的头脑。是的。

00:05:02.285 --> 00:05:08.370
• 真棒。特别是，成本
点最突出我，

00:05:08.370 --> 00:05:11.225
谁不喜欢的东西
更便宜， 特别是当涉及到

00:05:11.225 --> 00:05:14.975
大规模开发
应用程序和类似的东西？

00:05:14.975 --> 00:05:16.310
是的， 绝对的。

00:05:16.310 --> 00:05:19.295
• 真棒。作为 Pm 打开
分析团队，

00:05:19.295 --> 00:05:21.950
什么样的客户
你通常

00:05:21.950 --> 00:05:26.045
请参阅使用分析
您创建的工具，

00:05:26.045 --> 00:05:28.430
或什么样的客户群

00:05:28.430 --> 00:05:31.420
你想看看
更频繁地使用它？

00:05:31.420 --> 00:05:34.605
是的， 绝对的。在高层次上，

00:05:34.605 --> 00:05:36.270
它要回到性能，

00:05:36.270 --> 00:05:38.630
所以一般的动机
是任何人谁想要

00:05:38.630 --> 00:05:41.060
使其应用更快或更多

00:05:41.060 --> 00:05:43.590
表演者是动力或

00:05:43.590 --> 00:05:46.200
最初的原因
你来我们的工具。

00:05:46.200 --> 00:05:47.840
我只想说，如果你

00:05:47.840 --> 00:05:50.180
没有使用我们的
分析工具之前，

00:05:50.180 --> 00:05:51.530
当然， 我会
建议检查。

00:05:51.530 --> 00:05:53.060
现在有机会了
你可能会得到

00:05:53.060 --> 00:05:55.370
一些很容易的快速
胜利， 真的使

00:05:55.370 --> 00:05:58.160
您的应用程序多一点
表演，但不止于此，

00:05:58.160 --> 00:06:00.680
它通常是人
调查不

00:06:00.680 --> 00:06:02.150
必然打破你的程序

00:06:02.150 --> 00:06:03.680
在预防方面
它从编译，

00:06:03.680 --> 00:06:06.680
但它只是太慢， 也许
你管理错误的记忆和

00:06:06.680 --> 00:06:10.130
你内存不足
分配给其他事情。

00:06:10.130 --> 00:06:11.360
更具体一点

00:06:11.360 --> 00:06:12.380
比在谈话方面

00:06:12.380 --> 00:06:14.855
类似行业的东西
和我们在市场中经营的市场，

00:06:14.855 --> 00:06:17.720
提到它之前， 但
像游戏开发人员

00:06:17.720 --> 00:06:18.980
真正大到分析， 因为

00:06:18.980 --> 00:06:20.945
性能是如此关键
他们的产品。

00:06:20.945 --> 00:06:23.480
另一个内部客户
我们密切合作

00:06:23.480 --> 00:06:26.720
是一个公司，建立
3D渲染软件，

00:06:26.720 --> 00:06:29.420
这像一个非常
图形密集型工具。

00:06:29.420 --> 00:06:31.460
所以他们大量使用
我们的产品，因为

00:06:31.460 --> 00:06:33.640
性能也是他们的关键。

00:06:33.640 --> 00:06:35.685
• 太好了。我知道

00:06:35.685 --> 00:06:38.675
我任何时候， 我看到一个内存相关
问题时，我编码，

00:06:38.675 --> 00:06:41.570
这是最糟糕的事情， 你可以
可能因为我的意思是

00:06:41.570 --> 00:06:43.595
你从哪里开始呢？

00:06:43.595 --> 00:06:44.855
是的， 是的。

00:06:44.855 --> 00:06:46.010
是的， 是的。似乎去

00:06:46.010 --> 00:06:49.720
更大的只是一般
性能问题保护伞。

00:06:49.720 --> 00:06:52.610
谈到性能时，

00:06:52.610 --> 00:06:55.310
什么是一些其他的事情，
可以算作性能问题，

00:06:55.310 --> 00:06:57.230
因为我们总是说话
关于性能，就像它

00:06:57.230 --> 00:07:00.770
只是这个奇异的事情
当它实际上是相当大的。

00:07:00.770 --> 00:07:04.400
是的， 是的。这一点很棒。Ⅰ
会说，一般来说，

00:07:04.400 --> 00:07:05.840
有很多
不同，你的观点，

00:07:05.840 --> 00:07:07.070
可能会出现的性能问题。

00:07:07.070 --> 00:07:09.320
但一般来说，他们下降
成几个不同的桶，

00:07:09.320 --> 00:07:12.380
所以我会去一些
常见的存储桶， 弹出很多。

00:07:12.380 --> 00:07:15.200
第一，我会说
处理 CPU 时间不当。

00:07:15.200 --> 00:07:17.750
这回到只是

00:07:17.750 --> 00:07:21.410
使用坏或可能稍微
不是现代代码实践。

00:07:21.410 --> 00:07:23.630
有一件事我知道你是
非常熟悉莱斯利

00:07:23.630 --> 00:07:26.120
是异步代码
并使用该模式。

00:07:26.120 --> 00:07:26.465
是的， 是的。

00:07:26.465 --> 00:07:28.670
是的， 是的。当然， 如果

00:07:28.670 --> 00:07:31.235
你不一定使用
异步模式或

00:07:31.235 --> 00:07:33.440
使用模式
嵌套循环，不得不

00:07:33.440 --> 00:07:36.375
不断迭代多个
大型数据集的时间，

00:07:36.375 --> 00:07:37.735
会慢下来

00:07:37.735 --> 00:07:40.900
你的 Cpu， 真的让你
应用程序性能较低。

00:07:40.900 --> 00:07:43.480
此外，像
缓存不正确，

00:07:43.480 --> 00:07:45.800
所以也许你正在做一个Api调用

00:07:45.800 --> 00:07:47.270
一些外部数据框架或

00:07:47.270 --> 00:07:49.640
数据集并加载它
像大型数据集一样向上。

00:07:49.640 --> 00:07:51.110
如果你不缓存

00:07:51.110 --> 00:07:53.180
正确和每次
你进行 API 调用，

00:07:53.180 --> 00:07:54.650
您需要重新加载该大型数据集，

00:07:54.650 --> 00:07:57.530
这也会慢下来
您的应用程序关闭。

00:07:57.530 --> 00:08:01.640
Cpu 时间下的另一件事是
字符串生成和日志记录代码。

00:08:01.640 --> 00:08:04.790
这是一个有点调试
诊断的事情，

00:08:04.790 --> 00:08:06.680
但当你正在建设
出那些字符串，

00:08:06.680 --> 00:08:08.840
操作真的是
昂贵，

00:08:08.840 --> 00:08:11.225
成本分布在
您的整个应用程序，

00:08:11.225 --> 00:08:13.670
这样真的可以慢下来
整个应用程序。

00:08:13.670 --> 00:08:15.350
所有这些坏模式，

00:08:15.350 --> 00:08:16.610
不使用异步代码，

00:08:16.610 --> 00:08:19.940
缓存不正确是

00:08:19.940 --> 00:08:24.170
可能显示的不同模式
在处理不当的 Cpu 时间下。

00:08:24.170 --> 00:08:25.820
你的观点是关于处理不当

00:08:25.820 --> 00:08:27.110
记忆和很难解决，

00:08:27.110 --> 00:08:29.855
这绝对是另一个
高层问题，我们看到很多。

00:08:29.855 --> 00:08:32.780
这归结到也许
分配太多内存或

00:08:32.780 --> 00:08:35.750
过于频繁或未释放内存。

00:08:35.750 --> 00:08:38.000
一旦你有你的领域

00:08:38.000 --> 00:08:39.740
特定对象和悬挂

00:08:39.740 --> 00:08:41.765
对象会通过它们的寿命，

00:08:41.765 --> 00:08:44.930
这导致不是垃圾
正确收集。

00:08:44.930 --> 00:08:47.960
幸运的是，如果您在

00:08:47.960 --> 00:08:49.520
一些托管内存语言

00:08:49.520 --> 00:08:53.765
例如 C#，例如
使用the.Net框架，

00:08:53.765 --> 00:08:57.770
运行时确实会处理
一些垃圾收集给你。

00:08:57.770 --> 00:09:00.575
肯定越来越好
在运行时级别。

00:09:00.575 --> 00:09:02.210
但我们有工具可以帮助您

00:09:02.210 --> 00:09:06.815
可视化内存问题
分配，这是很难做的，

00:09:06.815 --> 00:09:08.570
否则，没有工具。

00:09:08.570 --> 00:09:11.090
此外，我们有工具，可以
帮助强制垃圾收集，

00:09:11.090 --> 00:09:12.230
因为即使运行时

00:09:12.230 --> 00:09:14.390
一个体面的工作
自己收集，

00:09:14.390 --> 00:09:16.190
有时， 我们将谈论
关于这些方案

00:09:16.190 --> 00:09:18.875
未来的视频， 你可能想要
强迫垃圾收集

00:09:18.875 --> 00:09:21.740
我们有工具是
能够帮助您做到这一点。

00:09:21.740 --> 00:09:23.990
所以我们谈到
处理 CPU 时间不当，

00:09:23.990 --> 00:09:25.370
我们谈到处理错误的记忆，

00:09:25.370 --> 00:09:27.260
最后一个主要桶， 我会谈论

00:09:27.260 --> 00:09:29.765
是应用的外部依赖项。

00:09:29.765 --> 00:09:32.285
显然，你有你的用户代码，

00:09:32.285 --> 00:09:34.370
但如果你进行 Api 调用

00:09:34.370 --> 00:09:36.050
不同的网络或慢速数据库

00:09:36.050 --> 00:09:38.300
调用你有这些
外部依赖关系，

00:09:38.300 --> 00:09:40.340
有点棘手， 弄清楚

00:09:40.340 --> 00:09:42.140
也许出了什么问题
因为你不一定

00:09:42.140 --> 00:09:43.790
有权访问所有这些

00:09:43.790 --> 00:09:46.250
外部不同位
你在玩

00:09:46.250 --> 00:09:47.540
因此，我们有工具，作为

00:09:47.540 --> 00:09:50.015
以及可以帮助你
处理这些方案。

00:09:50.015 --> 00:09:52.325
"好吧，酷。所以在这一点上，

00:09:52.325 --> 00:09:53.930
你已经想通了

00:09:53.930 --> 00:09:55.790
你有性能
代码中的问题，

00:09:55.790 --> 00:09:56.870
可能是记忆问题

00:09:56.870 --> 00:09:58.175
或 CPU 问题，

00:09:58.175 --> 00:10:00.170
或外部依赖项

00:10:00.170 --> 00:10:03.500
反应太慢了， 现在怎么办？

00:10:03.500 --> 00:10:06.200
对于大多数不
知道这些工具的机会

00:10:06.200 --> 00:10:08.960
他们可能需要发挥
试错游戏。

00:10:08.960 --> 00:10:12.365
那么，我们怎么能采取
更多的优势

00:10:12.365 --> 00:10:17.060
可视化中的现有工具
工作室来解决这些问题？

00:10:17.060 --> 00:10:20.030
• 当然。所以我们谈谈
一点点关于什么

00:10:20.030 --> 00:10:22.715
分析是和常见的
场景，如您建议。

00:10:22.715 --> 00:10:26.435
现在，我想结束这一切
视频与一个小挑逗，

00:10:26.435 --> 00:10:28.550
什么是共同时间
开始？

00:10:28.550 --> 00:10:32.255
我要推出视觉工作室
并分享我的屏幕真的很快。

00:10:32.255 --> 00:10:35.630
现在，我们在视觉
工作室，基本上，

00:10:35.630 --> 00:10:36.860
我想回答这个问题

00:10:36.860 --> 00:10:38.420
如何开始使用

00:10:38.420 --> 00:10:40.655
一些视觉
工作室分析工具？

00:10:40.655 --> 00:10:42.125
只是为了标记这个，

00:10:42.125 --> 00:10:45.785
我有一个ASP.NET核心网络
应用程序加载。

00:10:45.785 --> 00:10:48.050
开始一些
分析工具，

00:10:48.050 --> 00:10:50.720
我首先介绍的是
性能探查器。

00:10:50.720 --> 00:10:52.535
它是什么，我如何到达那里？

00:10:52.535 --> 00:10:54.095
要访问性能探查器，

00:10:54.095 --> 00:10:55.130
有几种不同的方式

00:10:55.130 --> 00:10:57.260
但你可以去调试和

00:10:57.260 --> 00:10:59.810
然后单击"性能"
"上下文菜单中的探查器"，

00:10:59.810 --> 00:11:01.205
还有这个键盘快捷方式

00:11:01.205 --> 00:11:03.740
Alt F2 ，也点击
在此按钮上。

00:11:03.740 --> 00:11:07.050
现在我们开始
特定摘要页。

00:11:07.240 --> 00:11:10.190
我们将进入表演
探查器更深入

00:11:10.190 --> 00:11:12.350
在未来的视频， 但基本上，

00:11:12.350 --> 00:11:14.420
这是一套工具
允许您驾驶

00:11:14.420 --> 00:11:15.920
您的绩效调查和

00:11:15.920 --> 00:11:17.660
看看很多不同的
各种指标。

00:11:17.660 --> 00:11:21.080
我们有 CPU 使用工具
不同的 CPU 调查。

00:11:21.080 --> 00:11:22.700
我们有几个不同的内存工具，

00:11:22.700 --> 00:11:25.220
你有一个新的异步
工具，以查看在哪里

00:11:25.220 --> 00:11:28.495
您的应用程序花费
与某些任务的时间。

00:11:28.495 --> 00:11:30.790
今天，我将展示

00:11:30.790 --> 00:11:32.320
CPU 使用工具和突出显示

00:11:32.320 --> 00:11:34.165
只是基本的收集过程，

00:11:34.165 --> 00:11:36.490
因为这是
我们最常用的工具。

00:11:36.490 --> 00:11:38.110
我们来谈谈这个
更多在未来的视频中，

00:11:38.110 --> 00:11:40.270
但你可以使用一些
这些工具结合在一起。

00:11:40.270 --> 00:11:41.695
还有一堆在方面

00:11:41.695 --> 00:11:44.065
优化不同
分析设置。

00:11:44.065 --> 00:11:46.270
但现在，我只是
保持默认值。

00:11:46.270 --> 00:11:48.420
这很有趣。就像

00:11:48.420 --> 00:11:51.155
探查器有其
自己的小世界。

00:11:51.155 --> 00:11:52.160
是的， 是的。

00:11:52.160 --> 00:11:53.900
• 菜单屏幕和一切。

00:11:53.900 --> 00:11:56.090
是的， 是的。它有很多
不同的工具，它是

00:11:56.090 --> 00:11:58.100
创建此诊断会话
正如你在这里看到的。

00:11:58.100 --> 00:11:59.420
一个很酷的事情是

00:11:59.420 --> 00:12:01.070
一旦你完成， 你
收集一堆数据

00:12:01.070 --> 00:12:02.360
您可以将其发送到
同事，他们

00:12:02.360 --> 00:12:04.235
可以加载到他们的机器上，

00:12:04.235 --> 00:12:06.200
帮助您进行调查

00:12:06.200 --> 00:12:08.330
看看发生了什么
在你的机器上

00:12:08.330 --> 00:12:11.040
所以你有一点点
在合作那里。

00:12:11.560 --> 00:12:14.810
一旦你有CPU
使用工具已单击，

00:12:14.810 --> 00:12:17.000
你可以点击 "开始"
以启动该过程。

00:12:17.000 --> 00:12:18.080
为了现在的时间，

00:12:18.080 --> 00:12:19.400
我已经收集了

00:12:19.400 --> 00:12:22.205
但你会打 "开始" 和
让它运行几秒钟，

00:12:22.205 --> 00:12:24.140
然后有一个停止
收集按钮。

00:12:24.140 --> 00:12:27.410
但最后，你会得到什么
是此报表的输出。

00:12:27.410 --> 00:12:28.790
所以，这是我们的CPU使用工具，

00:12:28.790 --> 00:12:30.995
再次，我们将有一个整体
专用视频。

00:12:30.995 --> 00:12:33.440
但基本上，与
我们大部分的工具

00:12:33.440 --> 00:12:35.000
他们有这个泳道的顶部，

00:12:35.000 --> 00:12:36.980
它有一个图形

00:12:36.980 --> 00:12:39.230
显示一些基本数据点
随着时间的推移， 一般来说，

00:12:39.230 --> 00:12:40.970
然后我们有一些表格视图

00:12:40.970 --> 00:12:42.200
这真的取决于工具，

00:12:42.200 --> 00:12:43.595
就像那张桌子显示的一样

00:12:43.595 --> 00:12:45.770
但基本上在这里，我们有

00:12:45.770 --> 00:12:48.050
一些函数是
兴趣，并正在采取

00:12:48.050 --> 00:12:50.870
很多的 Cpu 和
一些热路径， 这是

00:12:50.870 --> 00:12:52.670
基本上有些代码区域

00:12:52.670 --> 00:12:54.935
你真的应该去
回来， 并深入到。

00:12:54.935 --> 00:12:56.330
此外，在这种情况下，

00:12:56.330 --> 00:12:58.865
占用了很多
CPU 的资源。

00:12:58.865 --> 00:13:01.115
没什么
更精明地寻找

00:13:01.115 --> 00:13:03.785
比有图形
您的演示文稿。

00:13:03.785 --> 00:13:06.005
是的， 是的。你必须
喜欢饼图

00:13:06.005 --> 00:13:08.690
• 当我必须使
有时演示，

00:13:08.690 --> 00:13:11.060
我总是很兴奋， 当
我可以包括一个图表，

00:13:11.060 --> 00:13:13.580
就像，"哦，老老，很多
现在更正式。

00:13:13.580 --> 00:13:15.815
是的， 当然。所以，是的，

00:13:15.815 --> 00:13:18.590
这基本上是一个总结
性能探查器，再次，

00:13:18.590 --> 00:13:19.820
我们将完全进入一个更

00:13:19.820 --> 00:13:22.100
深入概述
这在未来。

00:13:22.100 --> 00:13:25.160
但对于热情
我们中间的学习者，

00:13:25.160 --> 00:13:26.930
如果你真的想
挖掘并开始，

00:13:26.930 --> 00:13:28.130
转到性能探查器，

00:13:28.130 --> 00:13:30.950
转到 Alt F2， 然后播放
周围与工具。

00:13:30.950 --> 00:13:33.755
太好了根据我的经验

00:13:33.755 --> 00:13:37.490
我熟悉
诊断集线器窗口，

00:13:37.490 --> 00:13:39.680
它也有一个CPU使用工具。

00:13:39.680 --> 00:13:41.990
有什么区别
两者之间？

00:13:41.990 --> 00:13:44.390
是的， 是的。在我们的下一集里

00:13:44.390 --> 00:13:45.740
我们要拆包
更多。

00:13:45.740 --> 00:13:50.000
但基本上，一个
与窗口的优势是它

00:13:50.000 --> 00:13:51.710
允许您采取
所有优势

00:13:51.710 --> 00:13:54.905
我们伟大的调试器功能，
你很清楚，莱斯利

00:13:54.905 --> 00:13:55.130
是的， 是的。

00:13:55.130 --> 00:13:56.045
• 已经为此工作。

00:13:56.045 --> 00:13:56.390
• 当然。

00:13:56.390 --> 00:13:58.640
• 所以它真的很酷得到
一些之间的互动

00:13:58.640 --> 00:14:00.920
分析工具，我们
以及调试器。

00:14:00.920 --> 00:14:02.480
因此，诊断工具窗口是

00:14:02.480 --> 00:14:04.925
真的使用这些
两个结合。

00:14:04.925 --> 00:14:08.465
性能探查器更多
就像独立的工具一样

00:14:08.465 --> 00:14:09.830
更健壮一点

00:14:09.830 --> 00:14:11.780
你也会得到一些
不同的可视化效果，

00:14:11.780 --> 00:14:13.400
因为我们有一些工具

00:14:13.400 --> 00:14:15.020
性能探查器
不一定

00:14:15.020 --> 00:14:18.620
具有等效对应项
在"诊断工具"窗口中。

00:14:18.620 --> 00:14:19.820
我们将讨论一些
那些更未使用的

00:14:19.820 --> 00:14:21.770
工具以后， 但是的。

00:14:21.770 --> 00:14:24.440
• 因此，在更大的规模上，

00:14:24.440 --> 00:14:26.945
在我们做深度潜水之前

00:14:26.945 --> 00:14:30.950
每个不同的真的真棒
要素和后部分，

00:14:30.950 --> 00:14:32.360
你会说什么是一些

00:14:32.360 --> 00:14:34.250
最难的挑战， 当它来

00:14:34.250 --> 00:14:38.640
开发
分析空间？

00:14:38.830 --> 00:14:41.810
哇， 那是
非常好的问题。

00:14:41.810 --> 00:14:43.280
我会说，在高水平，

00:14:43.280 --> 00:14:45.005
有两个主要的挑战。

00:14:45.005 --> 00:14:47.260
一个是，我们收集
吨和吨的数据。

00:14:47.260 --> 00:14:48.700
所以，我们真正想

00:14:48.700 --> 00:14:50.170
为我们的客户做
是确保

00:14:50.170 --> 00:14:53.635
数据是非常可消化的，
易于可视化和操作。

00:14:53.635 --> 00:14:56.110
所以弄清楚我们
想要最佳可视化

00:14:56.110 --> 00:14:57.730
大量的数据集，

00:14:57.730 --> 00:14:59.770
我们处理的是， 我认为有点棘手。

00:14:59.770 --> 00:15:02.110
第二件事，沿着这些路线，它是

00:15:02.110 --> 00:15:04.365
将数据捆绑到代码中，

00:15:04.365 --> 00:15:06.910
和本质上计算
如何连接，

00:15:06.910 --> 00:15:08.680
因为我们有吨
吐出的数据，

00:15:08.680 --> 00:15:11.080
再次，我们想使
确保它是可操作的。

00:15:11.080 --> 00:15:12.700
因此，能够突出

00:15:12.700 --> 00:15:15.325
的具体部分

00:15:15.325 --> 00:15:16.960
您的代码，是感兴趣的和

00:15:16.960 --> 00:15:18.610
需要关注的领域。

00:15:18.610 --> 00:15:21.610
解决你的问题最终是
另一个大挑战。

00:15:21.610 --> 00:15:23.080
• 这完全有道理。

00:15:23.080 --> 00:15:28.430
我只能想象必须尝试
筛选一个巨大的列表

00:15:28.430 --> 00:15:31.355
信息和被
无法快速

00:15:31.355 --> 00:15:35.120
找到实际热点。

00:15:35.120 --> 00:15:36.290
是的， 是的。太了
很多 [听不见]

00:15:36.290 --> 00:15:41.660
• 太好了。

00:15:41.660 --> 00:15:44.420
你有决赛吗？
我们潜水前的想法

00:15:44.420 --> 00:15:48.575
到所有这些真的很酷
工具和以后的部分？

00:15:48.575 --> 00:15:51.560
是的， 再说一遍， 只是真的
兴奋地开始这个系列。

00:15:51.560 --> 00:15:52.610
下一集

00:15:52.610 --> 00:15:53.675
我们要过去

00:15:53.675 --> 00:15:55.955
性能探查器 a
更深入一点，

00:15:55.955 --> 00:15:57.800
谈论更多的
工具，因为再次，

00:15:57.800 --> 00:16:00.590
我们只是简要地谈到
今天的 CPU 使用工具。

00:16:00.590 --> 00:16:02.000
我们也将做一点点

00:16:02.000 --> 00:16:04.355
优化设置概述，

00:16:04.355 --> 00:16:06.080
克服场景
在那里你可以开始

00:16:06.080 --> 00:16:07.715
串联使用一些工具。

00:16:07.715 --> 00:16:09.470
然后， 希望， 提到

00:16:09.470 --> 00:16:11.540
诊断工具窗口
你提起的

00:16:11.540 --> 00:16:14.140
莱斯利， 那个更
与调试器集成。

00:16:14.140 --> 00:16:17.890
再次，回到的想法
我们如何最好地使用少数

00:16:17.890 --> 00:16:19.790
这些工具结合在一起
而不仅仅是集中注意力

00:16:19.790 --> 00:16:21.800
就一个工具。所以，是的。

00:16:21.800 --> 00:16:25.460
• 太棒了。谢谢
和我一起[听不见]。

00:16:25.460 --> 00:16:31.115
我期待着你加入
我们为未来的情节来。

00:16:31.115 --> 00:16:32.780
• 感谢您的
我。我过的很好。

00:16:32.780 --> 00:16:34.610
• 太好了。再见。

00:16:34.610 --> 00:16:43.000
[音乐]

